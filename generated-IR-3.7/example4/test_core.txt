[1 of 1] Compiling Main             ( test.hs, test.o )

==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 27, types: 15, coercions: 0}

-- RHS size: {terms: 17, types: 9, coercions: 0}
main :: IO ()
[LclIdX, Str=DmdType]
main =
  >>
    @ IO
    GHC.Base.$fMonadIO
    @ ()
    @ ()
    (putStrLn (GHC.CString.unpackCString# "Hello, what's your name?"#))
    (>>=
       @ IO
       GHC.Base.$fMonadIO
       @ String
       @ ()
       getLine
       (\ (name_asY :: String) ->
          putStrLn
            (++
               @ Char
               (GHC.CString.unpackCString# "Hey "#)
               (++ @ Char name_asY (GHC.CString.unpackCString# ", you rock!"#)))))

-- RHS size: {terms: 2, types: 1, coercions: 0}
:Main.main :: IO ()
[LclIdX, Str=DmdType]
:Main.main = GHC.TopHandler.runMainIO @ () main

-- RHS size: {terms: 5, types: 0, coercions: 0}
Main.$trModule :: GHC.Types.Module
[LclIdX, Str=DmdType]
Main.$trModule =
  GHC.Types.Module
    (GHC.Types.TrNameS "main"#) (GHC.Types.TrNameS "Main"#)




==================== Simplifier ====================
  Max iterations = 4
  SimplMode {Phase = 0 [Non-opt simplification],
             inline,
             no rules,
             eta-expand,
             case-of-case}
Result size of Simplifier = {terms: 31, types: 17, coercions: 0}

-- RHS size: {terms: 17, types: 9, coercions: 0}
main :: IO ()
[LclIdX,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 380 0}]
main =
  >>
    @ IO
    GHC.Base.$fMonadIO
    @ ()
    @ ()
    (putStrLn (GHC.CString.unpackCString# "Hello, what's your name?"#))
    (>>=
       @ IO
       GHC.Base.$fMonadIO
       @ String
       @ ()
       getLine
       (\ (name_asY :: String) ->
          putStrLn
            (++
               @ Char
               (GHC.CString.unpackCString# "Hey "#)
               (++ @ Char name_asY (GHC.CString.unpackCString# ", you rock!"#)))))

-- RHS size: {terms: 2, types: 1, coercions: 0}
:Main.main :: IO ()
[LclIdX,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
:Main.main = GHC.TopHandler.runMainIO @ () main

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule_sCt :: GHC.Types.TrName
[LclId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
$trModule_sCt = GHC.Types.TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule_sCu :: GHC.Types.TrName
[LclId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
$trModule_sCu = GHC.Types.TrNameS "Main"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
Main.$trModule :: GHC.Types.Module
[LclIdX,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule = GHC.Types.Module $trModule_sCt $trModule_sCu




==================== Tidy Core ====================
Result size of Tidy Core = {terms: 31, types: 17, coercions: 0}

-- RHS size: {terms: 17, types: 9, coercions: 0}
main :: IO ()
[GblId, Str=DmdType]
main =
  >>
    @ IO
    GHC.Base.$fMonadIO
    @ ()
    @ ()
    (putStrLn (GHC.CString.unpackCString# "Hello, what's your name?"#))
    (>>=
       @ IO
       GHC.Base.$fMonadIO
       @ String
       @ ()
       getLine
       (\ (name_asY :: String) ->
          putStrLn
            (++
               @ Char
               (GHC.CString.unpackCString# "Hey "#)
               (++ @ Char name_asY (GHC.CString.unpackCString# ", you rock!"#)))))

-- RHS size: {terms: 2, types: 1, coercions: 0}
:Main.main :: IO ()
[GblId, Str=DmdType]
:Main.main = GHC.TopHandler.runMainIO @ () main

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule1_rCg :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=DmdType]
$trModule1_rCg = GHC.Types.TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule2_rCv :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=DmdType]
$trModule2_rCv = GHC.Types.TrNameS "Main"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
Main.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=DmdType]
Main.$trModule = GHC.Types.Module $trModule1_rCg $trModule2_rCv




==================== CorePrep ====================
Result size of CorePrep = {terms: 47, types: 32, coercions: 0}

-- RHS size: {terms: 22, types: 16, coercions: 0}
sat_sM6 :: GHC.Types.IO ()
[LclId, Str=DmdType]
sat_sM6 =
  let {
    sat_sM5 [Occ=Once] :: GHC.Base.String -> GHC.Types.IO ()
    [LclId, Str=DmdType]
    sat_sM5 =
      \ (name_sM0 [Occ=Once] :: GHC.Base.String) ->
        let {
          sat_sM4 [Occ=Once] :: GHC.Base.String
          [LclId, Str=DmdType]
          sat_sM4 =
            let {
              sat_sM3 [Occ=Once] :: [GHC.Types.Char]
              [LclId, Str=DmdType]
              sat_sM3 =
                let {
                  sat_sM2 [Occ=Once] :: [GHC.Types.Char]
                  [LclId, Str=DmdType]
                  sat_sM2 = GHC.CString.unpackCString# ", you rock!"# } in
                GHC.Base.++ @ GHC.Types.Char name_sM0 sat_sM2 } in
            let {
              sat_sM1 [Occ=Once] :: [GHC.Types.Char]
              [LclId, Str=DmdType]
              sat_sM1 = GHC.CString.unpackCString# "Hey "# } in
            GHC.Base.++ @ GHC.Types.Char sat_sM1 sat_sM3 } in
        System.IO.putStrLn sat_sM4 } in
  GHC.Base.>>=
    @ GHC.Types.IO
    GHC.Base.$fMonadIO
    @ GHC.Base.String
    @ ()
    System.IO.getLine
    sat_sM5

-- RHS size: {terms: 5, types: 1, coercions: 0}
sat_sLZ :: GHC.Types.IO ()
[LclId, Str=DmdType]
sat_sLZ =
  let {
    sat_sLY [Occ=Once] :: GHC.Base.String
    [LclId, Str=DmdType]
    sat_sLY =
      GHC.CString.unpackCString# "Hello, what's your name?"# } in
  System.IO.putStrLn sat_sLY

-- RHS size: {terms: 4, types: 3, coercions: 0}
Main.main :: GHC.Types.IO ()
[GblId, Str=DmdType]
Main.main =
  GHC.Base.>>
    @ GHC.Types.IO GHC.Base.$fMonadIO @ () @ () sat_sLZ sat_sM6

-- RHS size: {terms: 2, types: 1, coercions: 0}
:Main.main :: GHC.Types.IO ()
[GblId, Str=DmdType]
:Main.main = GHC.TopHandler.runMainIO @ () Main.main

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule1_rCg :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=DmdType, Unf=OtherCon []]
$trModule1_rCg = GHC.Types.TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule2_rCv :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=DmdType, Unf=OtherCon []]
$trModule2_rCv = GHC.Types.TrNameS "Main"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
Main.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=DmdType, Unf=OtherCon []]
Main.$trModule = GHC.Types.Module $trModule1_rCg $trModule2_rCv



Linking test ...
