{- Simplifier: Max iterations = 4
            SimplMode {Phase = 0 [final],
                       inline,
                       rules,
                       eta-expand,
                       case-of-case} -}
module Main where

lvl :: [] Char

{- Core Size{terms=2 types=0 cos=0 vbinds=0 jbinds=0} -}
lvl =
  GHC.CString.unpackCString#
    ", you rock!"#

lvl :: [] Char

{- Core Size{terms=2 types=0 cos=0 vbinds=0 jbinds=0} -}
lvl =
  GHC.CString.unpackCString#
    "Hello, what's your name?"#

main :: State# RealWorld ->
        (#,#) VoidRep PtrRepLifted (State# RealWorld) ()

{- Core Size{terms=24 types=22 cos=5 vbinds=0 jbinds=0} -}
main =
  λ s →
    case GHC.IO.Handle.Text.hPutStr2
           GHC.IO.Handle.FD.stdout
           lvl
           GHC.Types.True
           s
    of ds1 {
      (#,#) ipv ipv1 →
        case GHC.IO.Handle.Internals.wantReadableHandle_1
               @String
               GHC.IO.Handle.Text.hGetLine4
               GHC.IO.Handle.FD.stdin
               GHC.IO.Handle.Text.hGetLine2
               ipv
        of ds1 {
          (#,#) ipv ipv1 →
            GHC.IO.Handle.Text.hPutStr2
              GHC.IO.Handle.FD.stdout
              (GHC.CString.unpackAppendCString#
                 "Hey "#
                 (GHC.Base.++ @Char ipv1 lvl))
              GHC.Types.True
              ipv
        }
    }

main :: IO ()

{- Core Size{terms=1 types=0 cos=3 vbinds=0 jbinds=0} -}
main = main

main :: State# RealWorld ->
        (#,#) VoidRep PtrRepLifted (State# RealWorld) ()

{- Core Size{terms=2 types=1 cos=3 vbinds=0 jbinds=0} -}
main =
  GHC.TopHandler.runMainIO1
    @() main

main :: IO ()

{- Core Size{terms=1 types=0 cos=3 vbinds=0 jbinds=0} -}
main = main

$trModule :: TrName

{- Core Size{terms=2 types=0 cos=0 vbinds=0 jbinds=0} -}
$trModule =
  GHC.Types.TrNameS "main"#

$trModule :: TrName

{- Core Size{terms=2 types=0 cos=0 vbinds=0 jbinds=0} -}
$trModule =
  GHC.Types.TrNameS "Main"#

$trModule :: Module

{- Core Size{terms=3 types=0 cos=0 vbinds=0 jbinds=0} -}
$trModule =
  GHC.Types.Module
    $trModule $trModule
