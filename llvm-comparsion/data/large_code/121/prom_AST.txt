Module {moduleName = "<string>", moduleSourceFileName = "long.c", moduleDataLayout = Just (DataLayout {endianness = LittleEndian, mangling = Just ELFMangling, stackAlignment = Just 128, pointerLayouts = fromList [(AddrSpace 0,(64,AlignmentInfo {abiAlignment = 64, preferredAlignment = 64}))], typeLayouts = fromList [((IntegerAlign,1),AlignmentInfo {abiAlignment = 8, preferredAlignment = 8}),((IntegerAlign,8),AlignmentInfo {abiAlignment = 8, preferredAlignment = 8}),((IntegerAlign,16),AlignmentInfo {abiAlignment = 16, preferredAlignment = 16}),((IntegerAlign,32),AlignmentInfo {abiAlignment = 32, preferredAlignment = 32}),((IntegerAlign,64),AlignmentInfo {abiAlignment = 64, preferredAlignment = 64}),((VectorAlign,64),AlignmentInfo {abiAlignment = 64, preferredAlignment = 64}),((VectorAlign,128),AlignmentInfo {abiAlignment = 128, preferredAlignment = 128}),((FloatAlign,16),AlignmentInfo {abiAlignment = 16, preferredAlignment = 16}),((FloatAlign,32),AlignmentInfo {abiAlignment = 32, preferredAlignment = 32}),((FloatAlign,64),AlignmentInfo {abiAlignment = 64, preferredAlignment = 64}),((FloatAlign,80),AlignmentInfo {abiAlignment = 128, preferredAlignment = 128}),((FloatAlign,128),AlignmentInfo {abiAlignment = 128, preferredAlignment = 128})], aggregateLayout = AlignmentInfo {abiAlignment = 0, preferredAlignment = 64}, nativeSizes = Just (fromList [8,16,32,64])}), moduleTargetTriple = Just "x86_64-pc-linux-gnu", moduleDefinitions = [TypeDefinition (Name "struct.course") (Just (StructureType {isPacked = False, elementTypes = [IntegerType {typeBits = 32},ArrayType {nArrayElements = 30, elementType = IntegerType {typeBits = 8}}]})),GlobalDefinition (GlobalVariable {name = Name ".str", linkage = Private, visibility = Default, dllStorageClass = Nothing, threadLocalMode = Nothing, unnamedAddr = Just GlobalAddr, isConstant = True, type' = ArrayType {nArrayElements = 30, elementType = IntegerType {typeBits = 8}}, addrSpace = AddrSpace 0, initializer = Just (Array {memberType = IntegerType {typeBits = 8}, memberValues = [Int {integerBits = 8, integerValue = 69},Int {integerBits = 8, integerValue = 110},Int {integerBits = 8, integerValue = 116},Int {integerBits = 8, integerValue = 101},Int {integerBits = 8, integerValue = 114},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 116},Int {integerBits = 8, integerValue = 104},Int {integerBits = 8, integerValue = 101},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 110},Int {integerBits = 8, integerValue = 117},Int {integerBits = 8, integerValue = 109},Int {integerBits = 8, integerValue = 98},Int {integerBits = 8, integerValue = 101},Int {integerBits = 8, integerValue = 114},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 111},Int {integerBits = 8, integerValue = 102},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 114},Int {integerBits = 8, integerValue = 101},Int {integerBits = 8, integerValue = 99},Int {integerBits = 8, integerValue = 111},Int {integerBits = 8, integerValue = 114},Int {integerBits = 8, integerValue = 100},Int {integerBits = 8, integerValue = 115},Int {integerBits = 8, integerValue = 58},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 0}]}), section = Nothing, comdat = Nothing, alignment = 1, metadata = []}),GlobalDefinition (GlobalVariable {name = Name ".str.1", linkage = Private, visibility = Default, dllStorageClass = Nothing, threadLocalMode = Nothing, unnamedAddr = Just GlobalAddr, isConstant = True, type' = ArrayType {nArrayElements = 3, elementType = IntegerType {typeBits = 8}}, addrSpace = AddrSpace 0, initializer = Just (Array {memberType = IntegerType {typeBits = 8}, memberValues = [Int {integerBits = 8, integerValue = 37},Int {integerBits = 8, integerValue = 100},Int {integerBits = 8, integerValue = 0}]}), section = Nothing, comdat = Nothing, alignment = 1, metadata = []}),GlobalDefinition (GlobalVariable {name = Name ".str.2", linkage = Private, visibility = Default, dllStorageClass = Nothing, threadLocalMode = Nothing, unnamedAddr = Just GlobalAddr, isConstant = True, type' = ArrayType {nArrayElements = 26, elementType = IntegerType {typeBits = 8}}, addrSpace = AddrSpace 0, initializer = Just (Array {memberType = IntegerType {typeBits = 8}, memberValues = [Int {integerBits = 8, integerValue = 69},Int {integerBits = 8, integerValue = 110},Int {integerBits = 8, integerValue = 116},Int {integerBits = 8, integerValue = 101},Int {integerBits = 8, integerValue = 114},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 115},Int {integerBits = 8, integerValue = 117},Int {integerBits = 8, integerValue = 98},Int {integerBits = 8, integerValue = 106},Int {integerBits = 8, integerValue = 101},Int {integerBits = 8, integerValue = 99},Int {integerBits = 8, integerValue = 116},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 97},Int {integerBits = 8, integerValue = 110},Int {integerBits = 8, integerValue = 100},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 109},Int {integerBits = 8, integerValue = 97},Int {integerBits = 8, integerValue = 114},Int {integerBits = 8, integerValue = 107},Int {integerBits = 8, integerValue = 115},Int {integerBits = 8, integerValue = 58},Int {integerBits = 8, integerValue = 10},Int {integerBits = 8, integerValue = 0}]}), section = Nothing, comdat = Nothing, alignment = 1, metadata = []}),GlobalDefinition (GlobalVariable {name = Name ".str.3", linkage = Private, visibility = Default, dllStorageClass = Nothing, threadLocalMode = Nothing, unnamedAddr = Just GlobalAddr, isConstant = True, type' = ArrayType {nArrayElements = 6, elementType = IntegerType {typeBits = 8}}, addrSpace = AddrSpace 0, initializer = Just (Array {memberType = IntegerType {typeBits = 8}, memberValues = [Int {integerBits = 8, integerValue = 37},Int {integerBits = 8, integerValue = 115},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 37},Int {integerBits = 8, integerValue = 100},Int {integerBits = 8, integerValue = 0}]}), section = Nothing, comdat = Nothing, alignment = 1, metadata = []}),GlobalDefinition (GlobalVariable {name = Name ".str.4", linkage = Private, visibility = Default, dllStorageClass = Nothing, threadLocalMode = Nothing, unnamedAddr = Just GlobalAddr, isConstant = True, type' = ArrayType {nArrayElements = 25, elementType = IntegerType {typeBits = 8}}, addrSpace = AddrSpace 0, initializer = Just (Array {memberType = IntegerType {typeBits = 8}, memberValues = [Int {integerBits = 8, integerValue = 68},Int {integerBits = 8, integerValue = 105},Int {integerBits = 8, integerValue = 115},Int {integerBits = 8, integerValue = 112},Int {integerBits = 8, integerValue = 108},Int {integerBits = 8, integerValue = 97},Int {integerBits = 8, integerValue = 121},Int {integerBits = 8, integerValue = 105},Int {integerBits = 8, integerValue = 110},Int {integerBits = 8, integerValue = 103},Int {integerBits = 8, integerValue = 32},Int {integerBits = 8, integerValue = 73},Int {integerBits = 8, integerValue = 110},Int {integerBits = 8, integerValue = 102},Int {integerBits = 8, integerValue = 111},Int {integerBits = 8, integerValue = 114},Int {integerBits = 8, integerValue = 109},Int {integerBits = 8, integerValue = 97},Int {integerBits = 8, integerValue = 116},Int {integerBits = 8, integerValue = 105},Int {integerBits = 8, integerValue = 111},Int {integerBits = 8, integerValue = 110},Int {integerBits = 8, integerValue = 58},Int {integerBits = 8, integerValue = 10},Int {integerBits = 8, integerValue = 0}]}), section = Nothing, comdat = Nothing, alignment = 1, metadata = []}),GlobalDefinition (GlobalVariable {name = Name ".str.5", linkage = Private, visibility = Default, dllStorageClass = Nothing, threadLocalMode = Nothing, unnamedAddr = Just GlobalAddr, isConstant = True, type' = ArrayType {nArrayElements = 7, elementType = IntegerType {typeBits = 8}}, addrSpace = AddrSpace 0, initializer = Just (Array {memberType = IntegerType {typeBits = 8}, memberValues = [Int {integerBits = 8, integerValue = 37},Int {integerBits = 8, integerValue = 115},Int {integerBits = 8, integerValue = 9},Int {integerBits = 8, integerValue = 37},Int {integerBits = 8, integerValue = 100},Int {integerBits = 8, integerValue = 10},Int {integerBits = 8, integerValue = 0}]}), section = Nothing, comdat = Nothing, alignment = 1, metadata = []}),GlobalDefinition (Function {linkage = External, visibility = Default, dllStorageClass = Nothing, callingConvention = C, returnAttributes = [], returnType = IntegerType {typeBits = 32}, name = Name "main", parameters = ([],False), functionAttributes = [Left (GroupID 0)], section = Nothing, comdat = Nothing, alignment = 0, garbageCollectorName = Nothing, prefix = Nothing, basicBlocks = [BasicBlock (UnName 0) [UnName 1 := Alloca {allocatedType = IntegerType {typeBits = 32}, numElements = Nothing, alignment = 4, metadata = []},UnName 2 := Alloca {allocatedType = PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}, numElements = Nothing, alignment = 8, metadata = []},UnName 3 := Alloca {allocatedType = IntegerType {typeBits = 32}, numElements = Nothing, alignment = 4, metadata = []},UnName 4 := Alloca {allocatedType = IntegerType {typeBits = 32}, numElements = Nothing, alignment = 4, metadata = []},UnName 5 := Alloca {allocatedType = IntegerType {typeBits = 32}, numElements = Nothing, alignment = 4, metadata = []},Do (Store {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 1), value = ConstantOperand (Int {integerBits = 32, integerValue = 0}), maybeAtomicity = Nothing, alignment = 4, metadata = []}),UnName 6 := Call {tailCallKind = Nothing, callingConvention = C, returnAttributes = [], function = Right (ConstantOperand (GlobalReference (PointerType {pointerReferent = FunctionType {resultType = IntegerType {typeBits = 32}, argumentTypes = [PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}], isVarArg = True}, pointerAddrSpace = AddrSpace 0}) (Name "printf"))), arguments = [(ConstantOperand (GetElementPtr {inBounds = True, address = GlobalReference (PointerType {pointerReferent = ArrayType {nArrayElements = 30, elementType = IntegerType {typeBits = 8}}, pointerAddrSpace = AddrSpace 0}) (Name ".str"), indices = [Int {integerBits = 64, integerValue = 0},Int {integerBits = 64, integerValue = 0}]}),[])], functionAttributes = [], metadata = []},UnName 7 := Call {tailCallKind = Nothing, callingConvention = C, returnAttributes = [], function = Right (ConstantOperand (GlobalReference (PointerType {pointerReferent = FunctionType {resultType = IntegerType {typeBits = 32}, argumentTypes = [PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}], isVarArg = True}, pointerAddrSpace = AddrSpace 0}) (Name "__isoc99_scanf"))), arguments = [(ConstantOperand (GetElementPtr {inBounds = True, address = GlobalReference (PointerType {pointerReferent = ArrayType {nArrayElements = 3, elementType = IntegerType {typeBits = 8}}, pointerAddrSpace = AddrSpace 0}) (Name ".str.1"), indices = [Int {integerBits = 64, integerValue = 0},Int {integerBits = 64, integerValue = 0}]}),[]),(LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 3),[])], functionAttributes = [], metadata = []},UnName 8 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 3), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 9 := SExt {operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 8), type' = IntegerType {typeBits = 64}, metadata = []},UnName 10 := Mul {nsw = False, nuw = False, operand0 = LocalReference (IntegerType {typeBits = 64}) (UnName 9), operand1 = ConstantOperand (Int {integerBits = 64, integerValue = 36}), metadata = []},UnName 11 := Call {tailCallKind = Nothing, callingConvention = C, returnAttributes = [NoAlias], function = Right (ConstantOperand (GlobalReference (PointerType {pointerReferent = FunctionType {resultType = PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}, argumentTypes = [IntegerType {typeBits = 64}], isVarArg = False}, pointerAddrSpace = AddrSpace 0}) (Name "malloc"))), arguments = [(LocalReference (IntegerType {typeBits = 64}) (UnName 10),[])], functionAttributes = [Left (GroupID 3)], metadata = []},UnName 12 := BitCast {operand0 = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}) (UnName 11), type' = PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}, metadata = []},Do (Store {volatile = False, address = LocalReference (PointerType {pointerReferent = PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}, pointerAddrSpace = AddrSpace 0}) (UnName 2), value = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 12), maybeAtomicity = Nothing, alignment = 8, metadata = []}),Do (Store {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 4), value = ConstantOperand (Int {integerBits = 32, integerValue = 0}), maybeAtomicity = Nothing, alignment = 4, metadata = []})] (Do (Br {dest = UnName 13, metadata' = []})),BasicBlock (UnName 13) [UnName 14 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 4), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 15 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 3), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 16 := ICmp {iPredicate = SLT, operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 14), operand1 = LocalReference (IntegerType {typeBits = 32}) (UnName 15), metadata = []}] (Do (CondBr {condition = LocalReference (IntegerType {typeBits = 1}) (UnName 16), trueDest = UnName 17, falseDest = UnName 34, metadata' = []})),BasicBlock (UnName 17) [UnName 18 := Call {tailCallKind = Nothing, callingConvention = C, returnAttributes = [], function = Right (ConstantOperand (GlobalReference (PointerType {pointerReferent = FunctionType {resultType = IntegerType {typeBits = 32}, argumentTypes = [PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}], isVarArg = True}, pointerAddrSpace = AddrSpace 0}) (Name "printf"))), arguments = [(ConstantOperand (GetElementPtr {inBounds = True, address = GlobalReference (PointerType {pointerReferent = ArrayType {nArrayElements = 26, elementType = IntegerType {typeBits = 8}}, pointerAddrSpace = AddrSpace 0}) (Name ".str.2"), indices = [Int {integerBits = 64, integerValue = 0},Int {integerBits = 64, integerValue = 0}]}),[])], functionAttributes = [], metadata = []},UnName 19 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}, pointerAddrSpace = AddrSpace 0}) (UnName 2), maybeAtomicity = Nothing, alignment = 8, metadata = []},UnName 20 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 4), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 21 := SExt {operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 20), type' = IntegerType {typeBits = 64}, metadata = []},UnName 22 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 19), indices = [LocalReference (IntegerType {typeBits = 64}) (UnName 21)], metadata = []},UnName 23 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 22), indices = [ConstantOperand (Int {integerBits = 32, integerValue = 0}),ConstantOperand (Int {integerBits = 32, integerValue = 1})], metadata = []},UnName 24 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = ArrayType {nArrayElements = 30, elementType = IntegerType {typeBits = 8}}, pointerAddrSpace = AddrSpace 0}) (UnName 23), indices = [ConstantOperand (Int {integerBits = 64, integerValue = 0}),ConstantOperand (Int {integerBits = 64, integerValue = 0})], metadata = []},UnName 25 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}, pointerAddrSpace = AddrSpace 0}) (UnName 2), maybeAtomicity = Nothing, alignment = 8, metadata = []},UnName 26 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 4), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 27 := SExt {operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 26), type' = IntegerType {typeBits = 64}, metadata = []},UnName 28 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 25), indices = [LocalReference (IntegerType {typeBits = 64}) (UnName 27)], metadata = []},UnName 29 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 28), indices = [ConstantOperand (Int {integerBits = 32, integerValue = 0}),ConstantOperand (Int {integerBits = 32, integerValue = 0})], metadata = []},UnName 30 := Call {tailCallKind = Nothing, callingConvention = C, returnAttributes = [], function = Right (ConstantOperand (GlobalReference (PointerType {pointerReferent = FunctionType {resultType = IntegerType {typeBits = 32}, argumentTypes = [PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}], isVarArg = True}, pointerAddrSpace = AddrSpace 0}) (Name "__isoc99_scanf"))), arguments = [(ConstantOperand (GetElementPtr {inBounds = True, address = GlobalReference (PointerType {pointerReferent = ArrayType {nArrayElements = 6, elementType = IntegerType {typeBits = 8}}, pointerAddrSpace = AddrSpace 0}) (Name ".str.3"), indices = [Int {integerBits = 64, integerValue = 0},Int {integerBits = 64, integerValue = 0}]}),[]),(LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}) (UnName 24),[]),(LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 29),[])], functionAttributes = [], metadata = []}] (Do (Br {dest = UnName 31, metadata' = []})),BasicBlock (UnName 31) [UnName 32 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 4), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 33 := Add {nsw = True, nuw = False, operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 32), operand1 = ConstantOperand (Int {integerBits = 32, integerValue = 1}), metadata = []},Do (Store {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 4), value = LocalReference (IntegerType {typeBits = 32}) (UnName 33), maybeAtomicity = Nothing, alignment = 4, metadata = []})] (Do (Br {dest = UnName 13, metadata' = []})),BasicBlock (UnName 34) [UnName 35 := Call {tailCallKind = Nothing, callingConvention = C, returnAttributes = [], function = Right (ConstantOperand (GlobalReference (PointerType {pointerReferent = FunctionType {resultType = IntegerType {typeBits = 32}, argumentTypes = [PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}], isVarArg = True}, pointerAddrSpace = AddrSpace 0}) (Name "printf"))), arguments = [(ConstantOperand (GetElementPtr {inBounds = True, address = GlobalReference (PointerType {pointerReferent = ArrayType {nArrayElements = 25, elementType = IntegerType {typeBits = 8}}, pointerAddrSpace = AddrSpace 0}) (Name ".str.4"), indices = [Int {integerBits = 64, integerValue = 0},Int {integerBits = 64, integerValue = 0}]}),[])], functionAttributes = [], metadata = []},Do (Store {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 5), value = ConstantOperand (Int {integerBits = 32, integerValue = 0}), maybeAtomicity = Nothing, alignment = 4, metadata = []})] (Do (Br {dest = UnName 36, metadata' = []})),BasicBlock (UnName 36) [UnName 37 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 5), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 38 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 3), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 39 := ICmp {iPredicate = SLT, operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 37), operand1 = LocalReference (IntegerType {typeBits = 32}) (UnName 38), metadata = []}] (Do (CondBr {condition = LocalReference (IntegerType {typeBits = 1}) (UnName 39), trueDest = UnName 40, falseDest = UnName 57, metadata' = []})),BasicBlock (UnName 40) [UnName 41 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}, pointerAddrSpace = AddrSpace 0}) (UnName 2), maybeAtomicity = Nothing, alignment = 8, metadata = []},UnName 42 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 5), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 43 := SExt {operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 42), type' = IntegerType {typeBits = 64}, metadata = []},UnName 44 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 41), indices = [LocalReference (IntegerType {typeBits = 64}) (UnName 43)], metadata = []},UnName 45 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 44), indices = [ConstantOperand (Int {integerBits = 32, integerValue = 0}),ConstantOperand (Int {integerBits = 32, integerValue = 1})], metadata = []},UnName 46 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = ArrayType {nArrayElements = 30, elementType = IntegerType {typeBits = 8}}, pointerAddrSpace = AddrSpace 0}) (UnName 45), indices = [ConstantOperand (Int {integerBits = 64, integerValue = 0}),ConstantOperand (Int {integerBits = 64, integerValue = 0})], metadata = []},UnName 47 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}, pointerAddrSpace = AddrSpace 0}) (UnName 2), maybeAtomicity = Nothing, alignment = 8, metadata = []},UnName 48 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 5), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 49 := SExt {operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 48), type' = IntegerType {typeBits = 64}, metadata = []},UnName 50 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 47), indices = [LocalReference (IntegerType {typeBits = 64}) (UnName 49)], metadata = []},UnName 51 := GetElementPtr {inBounds = True, address = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 50), indices = [ConstantOperand (Int {integerBits = 32, integerValue = 0}),ConstantOperand (Int {integerBits = 32, integerValue = 0})], metadata = []},UnName 52 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 51), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 53 := Call {tailCallKind = Nothing, callingConvention = C, returnAttributes = [], function = Right (ConstantOperand (GlobalReference (PointerType {pointerReferent = FunctionType {resultType = IntegerType {typeBits = 32}, argumentTypes = [PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}], isVarArg = True}, pointerAddrSpace = AddrSpace 0}) (Name "printf"))), arguments = [(ConstantOperand (GetElementPtr {inBounds = True, address = GlobalReference (PointerType {pointerReferent = ArrayType {nArrayElements = 7, elementType = IntegerType {typeBits = 8}}, pointerAddrSpace = AddrSpace 0}) (Name ".str.5"), indices = [Int {integerBits = 64, integerValue = 0},Int {integerBits = 64, integerValue = 0}]}),[]),(LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}) (UnName 46),[]),(LocalReference (IntegerType {typeBits = 32}) (UnName 52),[])], functionAttributes = [], metadata = []}] (Do (Br {dest = UnName 54, metadata' = []})),BasicBlock (UnName 54) [UnName 55 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 5), maybeAtomicity = Nothing, alignment = 4, metadata = []},UnName 56 := Add {nsw = True, nuw = False, operand0 = LocalReference (IntegerType {typeBits = 32}) (UnName 55), operand1 = ConstantOperand (Int {integerBits = 32, integerValue = 1}), metadata = []},Do (Store {volatile = False, address = LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 32}, pointerAddrSpace = AddrSpace 0}) (UnName 5), value = LocalReference (IntegerType {typeBits = 32}) (UnName 56), maybeAtomicity = Nothing, alignment = 4, metadata = []})] (Do (Br {dest = UnName 36, metadata' = []})),BasicBlock (UnName 57) [UnName 58 := Load {volatile = False, address = LocalReference (PointerType {pointerReferent = PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}, pointerAddrSpace = AddrSpace 0}) (UnName 2), maybeAtomicity = Nothing, alignment = 8, metadata = []},UnName 59 := BitCast {operand0 = LocalReference (PointerType {pointerReferent = NamedTypeReference (Name "struct.course"), pointerAddrSpace = AddrSpace 0}) (UnName 58), type' = PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}, metadata = []},Do (Call {tailCallKind = Nothing, callingConvention = C, returnAttributes = [], function = Right (ConstantOperand (GlobalReference (PointerType {pointerReferent = FunctionType {resultType = VoidType, argumentTypes = [PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}], isVarArg = False}, pointerAddrSpace = AddrSpace 0}) (Name "free"))), arguments = [(LocalReference (PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}) (UnName 59),[])], functionAttributes = [Left (GroupID 3)], metadata = []})] (Do (Ret {returnOperand = Just (ConstantOperand (Int {integerBits = 32, integerValue = 0})), metadata' = []}))], personalityFunction = Nothing, metadata = []}),GlobalDefinition (Function {linkage = External, visibility = Default, dllStorageClass = Nothing, callingConvention = C, returnAttributes = [], returnType = IntegerType {typeBits = 32}, name = Name "printf", parameters = ([Parameter (PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}) (UnName 0) []],True), functionAttributes = [Left (GroupID 1)], section = Nothing, comdat = Nothing, alignment = 0, garbageCollectorName = Nothing, prefix = Nothing, basicBlocks = [], personalityFunction = Nothing, metadata = []}),GlobalDefinition (Function {linkage = External, visibility = Default, dllStorageClass = Nothing, callingConvention = C, returnAttributes = [], returnType = IntegerType {typeBits = 32}, name = Name "__isoc99_scanf", parameters = ([Parameter (PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}) (UnName 0) []],True), functionAttributes = [Left (GroupID 1)], section = Nothing, comdat = Nothing, alignment = 0, garbageCollectorName = Nothing, prefix = Nothing, basicBlocks = [], personalityFunction = Nothing, metadata = []}),GlobalDefinition (Function {linkage = External, visibility = Default, dllStorageClass = Nothing, callingConvention = C, returnAttributes = [NoAlias], returnType = PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}, name = Name "malloc", parameters = ([Parameter (IntegerType {typeBits = 64}) (UnName 0) []],False), functionAttributes = [Left (GroupID 2)], section = Nothing, comdat = Nothing, alignment = 0, garbageCollectorName = Nothing, prefix = Nothing, basicBlocks = [], personalityFunction = Nothing, metadata = []}),GlobalDefinition (Function {linkage = External, visibility = Default, dllStorageClass = Nothing, callingConvention = C, returnAttributes = [], returnType = VoidType, name = Name "free", parameters = ([Parameter (PointerType {pointerReferent = IntegerType {typeBits = 8}, pointerAddrSpace = AddrSpace 0}) (UnName 0) []],False), functionAttributes = [Left (GroupID 2)], section = Nothing, comdat = Nothing, alignment = 0, garbageCollectorName = Nothing, prefix = Nothing, basicBlocks = [], personalityFunction = Nothing, metadata = []}),NamedMetadataDefinition "llvm.module.flags" [MetadataNodeID 0],NamedMetadataDefinition "llvm.ident" [MetadataNodeID 1],MetadataNodeDefinition (MetadataNodeID 0) (MDTuple [Just (MDValue (ConstantOperand (Int {integerBits = 32, integerValue = 1}))),Just (MDString "wchar_size"),Just (MDValue (ConstantOperand (Int {integerBits = 32, integerValue = 4})))]),MetadataNodeDefinition (MetadataNodeID 1) (MDTuple [Just (MDString "clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)")]),FunctionAttributes (GroupID 3) [NoUnwind],FunctionAttributes (GroupID 2) [NoUnwind,StringAttribute {stringAttributeKind = "correctly-rounded-divide-sqrt-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "disable-tail-calls", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "less-precise-fpmad", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-frame-pointer-elim", stringAttributeValue = "true"},StringAttribute {stringAttributeKind = "no-frame-pointer-elim-non-leaf", stringAttributeValue = ""},StringAttribute {stringAttributeKind = "no-infs-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-nans-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-signed-zeros-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-trapping-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "stack-protector-buffer-size", stringAttributeValue = "8"},StringAttribute {stringAttributeKind = "target-cpu", stringAttributeValue = "x86-64"},StringAttribute {stringAttributeKind = "target-features", stringAttributeValue = "+cx8,+fxsr,+mmx,+sse,+sse2,+x87"},StringAttribute {stringAttributeKind = "unsafe-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "use-soft-float", stringAttributeValue = "false"}],FunctionAttributes (GroupID 1) [StringAttribute {stringAttributeKind = "correctly-rounded-divide-sqrt-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "disable-tail-calls", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "less-precise-fpmad", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-frame-pointer-elim", stringAttributeValue = "true"},StringAttribute {stringAttributeKind = "no-frame-pointer-elim-non-leaf", stringAttributeValue = ""},StringAttribute {stringAttributeKind = "no-infs-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-nans-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-signed-zeros-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-trapping-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "stack-protector-buffer-size", stringAttributeValue = "8"},StringAttribute {stringAttributeKind = "target-cpu", stringAttributeValue = "x86-64"},StringAttribute {stringAttributeKind = "target-features", stringAttributeValue = "+cx8,+fxsr,+mmx,+sse,+sse2,+x87"},StringAttribute {stringAttributeKind = "unsafe-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "use-soft-float", stringAttributeValue = "false"}],FunctionAttributes (GroupID 0) [NoInline,NoUnwind,OptimizeNone,UWTable,StringAttribute {stringAttributeKind = "correctly-rounded-divide-sqrt-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "disable-tail-calls", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "less-precise-fpmad", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "min-legal-vector-width", stringAttributeValue = "0"},StringAttribute {stringAttributeKind = "no-frame-pointer-elim", stringAttributeValue = "true"},StringAttribute {stringAttributeKind = "no-frame-pointer-elim-non-leaf", stringAttributeValue = ""},StringAttribute {stringAttributeKind = "no-infs-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-jump-tables", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-nans-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-signed-zeros-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "no-trapping-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "stack-protector-buffer-size", stringAttributeValue = "8"},StringAttribute {stringAttributeKind = "target-cpu", stringAttributeValue = "x86-64"},StringAttribute {stringAttributeKind = "target-features", stringAttributeValue = "+cx8,+fxsr,+mmx,+sse,+sse2,+x87"},StringAttribute {stringAttributeKind = "unsafe-fp-math", stringAttributeValue = "false"},StringAttribute {stringAttributeKind = "use-soft-float", stringAttributeValue = "false"}]]}