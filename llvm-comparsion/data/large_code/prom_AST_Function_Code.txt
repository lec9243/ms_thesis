declare external ccc  i8* @memcpy$def(i8*, i8*, i64)    
declare external ccc  i8* @memmove$def(i8*, i8*, i64)    
declare external ccc  i8* @memset$def(i8*, i64, i64)    
declare external ccc  i64 @newSpark$def(i8*, i8*)    
define external cc 10  void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64  %R1_Arg, i64  %R2_Arg, i64  %R3_Arg, i64  %R4_Arg, i64  %R5_Arg, i64  %R6_Arg, i64  %SpLim_Arg) #0 align 8  prefix <{i64, i32, i32}> <{ i64 0, i32 21, i32 trunc i64 sub i64 ptrtoint (%_uPu_srt_struct* @_uPu_srt$def to i64), ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64) to i32 }>{
nPv:
  %lrgc = alloca i64 
  %R3_Var = alloca i64 
  store  i64 undef, i64* %R3_Var 
  %R4_Var = alloca i64 
  store  i64 undef, i64* %R4_Var 
  %R5_Var = alloca i64 
  store  i64 undef, i64* %R5_Var 
  %R6_Var = alloca i64 
  store  i64 undef, i64* %R6_Var 
  %F1_Var = alloca float 
  store  float undef, float* %F1_Var 
  %D1_Var = alloca double 
  store  double undef, double* %D1_Var 
  %F2_Var = alloca float 
  store  float undef, float* %F2_Var 
  %D2_Var = alloca double 
  store  double undef, double* %D2_Var 
  %F3_Var = alloca float 
  store  float undef, float* %F3_Var 
  %D3_Var = alloca double 
  store  double undef, double* %D3_Var 
  %F4_Var = alloca float 
  store  float undef, float* %F4_Var 
  %D4_Var = alloca double 
  store  double undef, double* %D4_Var 
  %F5_Var = alloca float 
  store  float undef, float* %F5_Var 
  %D5_Var = alloca double 
  store  double undef, double* %D5_Var 
  %F6_Var = alloca float 
  store  float undef, float* %F6_Var 
  %D6_Var = alloca double 
  store  double undef, double* %D6_Var 
  %lcPo = alloca i64 
  %R2_Var = alloca i64 
  store  i64 undef, i64* %R2_Var 
  %R1_Var = alloca i64 
  store  i64 %R1_Arg, i64* %R1_Var 
  %Sp_Var = alloca i64* 
  store  i64* %Sp_Arg, i64** %Sp_Var 
  br label %cPr 
cPr:
  %lnPw = load  i64, i64* %R1_Var 
  store  i64 %lnPw, i64* %lrgc 
  %lnPx = load  i64*, i64** %Sp_Var 
  %lnPy = getelementptr inbounds i64, i64* %lnPx, i32 1 
  %lnPz = ptrtoint i64* %lnPy to i64 
  %lnPA = sub   i64 %lnPz, 24 
  %lnPB = icmp ult i64 %lnPA, %SpLim_Arg 
  %lnPD =  call ccc  i1  @llvm.expect.i1(i1  %lnPB, i1  0)  
  br i1 %lnPD, label %cPs, label %cPt 
cPt:
  %lnPE = ptrtoint i64* %Base_Arg to i64 
  %lnPF = inttoptr i64 %lnPE to i8* 
  %lnPG = load  i64, i64* %lrgc 
  %lnPH = inttoptr i64 %lnPG to i8* 
  %lnPI = bitcast i8* @newCAF to i8* (i8*, i8*)* 
  store  i64 undef, i64* %R3_Var 
  store  i64 undef, i64* %R4_Var 
  store  i64 undef, i64* %R5_Var 
  store  i64 undef, i64* %R6_Var 
  store  float undef, float* %F1_Var 
  store  double undef, double* %D1_Var 
  store  float undef, float* %F2_Var 
  store  double undef, double* %D2_Var 
  store  float undef, float* %F3_Var 
  store  double undef, double* %D3_Var 
  store  float undef, float* %F4_Var 
  store  double undef, double* %D4_Var 
  store  float undef, float* %F5_Var 
  store  double undef, double* %D5_Var 
  store  float undef, float* %F6_Var 
  store  double undef, double* %D6_Var 
  %lnPJ =  call ccc  i8*  %lnPI(i8*  %lnPF, i8*  %lnPH) #0 
  %lnPK = ptrtoint i8* %lnPJ to i64 
  store  i64 %lnPK, i64* %lcPo 
  %lnPL = load  i64, i64* %lcPo 
  %lnPM = icmp eq i64 %lnPL, 0 
  br i1 %lnPM, label %cPq, label %cPp 
cPp:
  %lnPO = ptrtoint i8* @stg_bh_upd_frame_info to i64 
  %lnPN = load  i64*, i64** %Sp_Var 
  %lnPP = getelementptr inbounds i64, i64* %lnPN, i32 4294967294 
  store  i64 %lnPO, i64* %lnPP ,!tbaa !0
  %lnPR = load  i64, i64* %lcPo 
  %lnPQ = load  i64*, i64** %Sp_Var 
  %lnPS = getelementptr inbounds i64, i64* %lnPQ, i32 4294967295 
  store  i64 %lnPR, i64* %lnPS ,!tbaa !0
  %lnPT = ptrtoint %sPk_closure_struct* @sPk_closure$def to i64 
  %lnPU = add   i64 %lnPT, 1 
  store  i64 %lnPU, i64* %R3_Var 
  %lnPV = ptrtoint i8* @base_GHCziShow_zdfShowInteger_closure to i64 
  store  i64 %lnPV, i64* %R2_Var 
  %lnPW = ptrtoint i8* @base_SystemziIO_print_closure to i64 
  store  i64 %lnPW, i64* %R1_Var 
  %lnPX = load  i64*, i64** %Sp_Var 
  %lnPY = getelementptr inbounds i64, i64* %lnPX, i32 4294967294 
  %lnPZ = ptrtoint i64* %lnPY to i64 
  %lnQ0 = inttoptr i64 %lnPZ to i64* 
  store  i64* %lnQ0, i64** %Sp_Var 
  %lnQ1 = bitcast i8* @stg_ap_pp_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* 
  %lnQ2 = load  i64*, i64** %Sp_Var 
  %lnQ3 = load  i64, i64* %R1_Var 
  %lnQ4 = load  i64, i64* %R2_Var 
  %lnQ5 = load  i64, i64* %R3_Var 
  tail call cc 10  void  %lnQ1(i64*  %Base_Arg, i64*  %lnQ2, i64*  %Hp_Arg, i64  %lnQ3, i64  %lnQ4, i64  %lnQ5, i64  undef, i64  undef, i64  undef, i64  %SpLim_Arg) #0 
  ret void 
cPq:
  %lnQ6 = load  i64, i64* %lrgc 
  %lnQ7 = inttoptr i64 %lnQ6 to i64* 
  %lnQ8 = load  i64, i64* %lnQ7 ,!tbaa !1
  %lnQ9 = inttoptr i64 %lnQ8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* 
  %lnQa = load  i64*, i64** %Sp_Var 
  %lnQb = load  i64, i64* %R1_Var 
  tail call cc 10  void  %lnQ9(i64*  %Base_Arg, i64*  %lnQa, i64*  %Hp_Arg, i64  %lnQb, i64  undef, i64  undef, i64  undef, i64  undef, i64  undef, i64  %SpLim_Arg) #0 
  ret void 
cPs:
  %lnQc = load  i64, i64* %lrgc 
  store  i64 %lnQc, i64* %R1_Var 
  %lnQd = getelementptr inbounds i64, i64* %Base_Arg, i32 4294967294 
  %lnQe = bitcast i64* %lnQd to i64* 
  %lnQf = load  i64, i64* %lnQe ,!tbaa !2
  %lnQg = inttoptr i64 %lnQf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* 
  %lnQh = load  i64*, i64** %Sp_Var 
  %lnQi = load  i64, i64* %R1_Var 
  tail call cc 10  void  %lnQg(i64*  %Base_Arg, i64*  %lnQh, i64*  %Hp_Arg, i64  %lnQi, i64  undef, i64  undef, i64  undef, i64  undef, i64  undef, i64  %SpLim_Arg) #0 
  ret void 
}
declare external ccc  i1 @llvm.expect.i1(i1, i1) #1   
define external cc 10  void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64  %R1_Arg, i64  %R2_Arg, i64  %R3_Arg, i64  %R4_Arg, i64  %R5_Arg, i64  %R6_Arg, i64  %SpLim_Arg) #0 align 8  prefix <{i64, i32, i32}> <{ i64 0, i32 21, i32 trunc i64 sub i64 ptrtoint (%_uQs_srt_struct* @_uQs_srt$def to i64), ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64) to i32 }>{
nQt:
  %l01D = alloca i64 
  %R3_Var = alloca i64 
  store  i64 undef, i64* %R3_Var 
  %R4_Var = alloca i64 
  store  i64 undef, i64* %R4_Var 
  %R5_Var = alloca i64 
  store  i64 undef, i64* %R5_Var 
  %R6_Var = alloca i64 
  store  i64 undef, i64* %R6_Var 
  %F1_Var = alloca float 
  store  float undef, float* %F1_Var 
  %D1_Var = alloca double 
  store  double undef, double* %D1_Var 
  %F2_Var = alloca float 
  store  float undef, float* %F2_Var 
  %D2_Var = alloca double 
  store  double undef, double* %D2_Var 
  %F3_Var = alloca float 
  store  float undef, float* %F3_Var 
  %D3_Var = alloca double 
  store  double undef, double* %D3_Var 
  %F4_Var = alloca float 
  store  float undef, float* %F4_Var 
  %D4_Var = alloca double 
  store  double undef, double* %D4_Var 
  %F5_Var = alloca float 
  store  float undef, float* %F5_Var 
  %D5_Var = alloca double 
  store  double undef, double* %D5_Var 
  %F6_Var = alloca float 
  store  float undef, float* %F6_Var 
  %D6_Var = alloca double 
  store  double undef, double* %D6_Var 
  %lcQm = alloca i64 
  %R2_Var = alloca i64 
  store  i64 undef, i64* %R2_Var 
  %R1_Var = alloca i64 
  store  i64 %R1_Arg, i64* %R1_Var 
  %Sp_Var = alloca i64* 
  store  i64* %Sp_Arg, i64** %Sp_Var 
  br label %cQp 
cQp:
  %lnQu = load  i64, i64* %R1_Var 
  store  i64 %lnQu, i64* %l01D 
  %lnQv = load  i64*, i64** %Sp_Var 
  %lnQw = getelementptr inbounds i64, i64* %lnQv, i32 1 
  %lnQx = ptrtoint i64* %lnQw to i64 
  %lnQy = sub   i64 %lnQx, 24 
  %lnQz = icmp ult i64 %lnQy, %SpLim_Arg 
  %lnQA =  call ccc  i1  @llvm.expect.i1(i1  %lnQz, i1  0)  
  br i1 %lnQA, label %cQq, label %cQr 
cQr:
  %lnQB = ptrtoint i64* %Base_Arg to i64 
  %lnQC = inttoptr i64 %lnQB to i8* 
  %lnQD = load  i64, i64* %l01D 
  %lnQE = inttoptr i64 %lnQD to i8* 
  %lnQF = bitcast i8* @newCAF to i8* (i8*, i8*)* 
  store  i64 undef, i64* %R3_Var 
  store  i64 undef, i64* %R4_Var 
  store  i64 undef, i64* %R5_Var 
  store  i64 undef, i64* %R6_Var 
  store  float undef, float* %F1_Var 
  store  double undef, double* %D1_Var 
  store  float undef, float* %F2_Var 
  store  double undef, double* %D2_Var 
  store  float undef, float* %F3_Var 
  store  double undef, double* %D3_Var 
  store  float undef, float* %F4_Var 
  store  double undef, double* %D4_Var 
  store  float undef, float* %F5_Var 
  store  double undef, double* %D5_Var 
  store  float undef, float* %F6_Var 
  store  double undef, double* %D6_Var 
  %lnQG =  call ccc  i8*  %lnQF(i8*  %lnQC, i8*  %lnQE) #0 
  %lnQH = ptrtoint i8* %lnQG to i64 
  store  i64 %lnQH, i64* %lcQm 
  %lnQI = load  i64, i64* %lcQm 
  %lnQJ = icmp eq i64 %lnQI, 0 
  br i1 %lnQJ, label %cQo, label %cQn 
cQn:
  %lnQL = ptrtoint i8* @stg_bh_upd_frame_info to i64 
  %lnQK = load  i64*, i64** %Sp_Var 
  %lnQM = getelementptr inbounds i64, i64* %lnQK, i32 4294967294 
  store  i64 %lnQL, i64* %lnQM ,!tbaa !0
  %lnQO = load  i64, i64* %lcQm 
  %lnQN = load  i64*, i64** %Sp_Var 
  %lnQP = getelementptr inbounds i64, i64* %lnQN, i32 4294967295 
  store  i64 %lnQO, i64* %lnQP ,!tbaa !0
  %lnQQ = ptrtoint %Main_main_closure_struct* @Main_main_closure$def to i64 
  store  i64 %lnQQ, i64* %R2_Var 
  %lnQR = ptrtoint i8* @base_GHCziTopHandler_runMainIO_closure to i64 
  store  i64 %lnQR, i64* %R1_Var 
  %lnQS = load  i64*, i64** %Sp_Var 
  %lnQT = getelementptr inbounds i64, i64* %lnQS, i32 4294967294 
  %lnQU = ptrtoint i64* %lnQT to i64 
  %lnQV = inttoptr i64 %lnQU to i64* 
  store  i64* %lnQV, i64** %Sp_Var 
  %lnQW = bitcast i8* @stg_ap_p_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* 
  %lnQX = load  i64*, i64** %Sp_Var 
  %lnQY = load  i64, i64* %R1_Var 
  %lnQZ = load  i64, i64* %R2_Var 
  tail call cc 10  void  %lnQW(i64*  %Base_Arg, i64*  %lnQX, i64*  %Hp_Arg, i64  %lnQY, i64  %lnQZ, i64  undef, i64  undef, i64  undef, i64  undef, i64  %SpLim_Arg) #0 
  ret void 
cQo:
  %lnR0 = load  i64, i64* %l01D 
  %lnR1 = inttoptr i64 %lnR0 to i64* 
  %lnR2 = load  i64, i64* %lnR1 ,!tbaa !1
  %lnR3 = inttoptr i64 %lnR2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* 
  %lnR4 = load  i64*, i64** %Sp_Var 
  %lnR5 = load  i64, i64* %R1_Var 
  tail call cc 10  void  %lnR3(i64*  %Base_Arg, i64*  %lnR4, i64*  %Hp_Arg, i64  %lnR5, i64  undef, i64  undef, i64  undef, i64  undef, i64  undef, i64  %SpLim_Arg) #0 
  ret void 
cQq:
  %lnR6 = load  i64, i64* %l01D 
  store  i64 %lnR6, i64* %R1_Var 
  %lnR7 = getelementptr inbounds i64, i64* %Base_Arg, i32 4294967294 
  %lnR8 = bitcast i64* %lnR7 to i64* 
  %lnR9 = load  i64, i64* %lnR8 ,!tbaa !2
  %lnRa = inttoptr i64 %lnR9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* 
  %lnRb = load  i64*, i64** %Sp_Var 
  %lnRc = load  i64, i64* %R1_Var 
  tail call cc 10  void  %lnRa(i64*  %Base_Arg, i64*  %lnRb, i64*  %Hp_Arg, i64  %lnRc, i64  undef, i64  undef, i64  undef, i64  undef, i64  undef, i64  %SpLim_Arg) #0 
  ret void 
}
